// Configuration for a stream
struct StreamConfig {
    kind: U256, // 0 - Linear, 1 - Interval, 2 - Custom

    isCancelable: Bool, // Indicates if the stream is cancelable
    startTimestamp: U256, // Start timestamo of the stream

    // Linear stream settings
    endTimestamp: U256, // End timestamp of the linear stream

    // Interval stream settings
    unlockInterval: U256, // Interval for unlocking
    unlockPercentage: U256, // Percentage to unlock at each interval
    
    // Custom stream settings
    unlockSteps: ByteVec // Unlock steps of the custom stream
}

Contract Stream(
    factoryContractId: ByteVec, // ID of the factory contract
    creator: Address, // Address of the stream creator
    recipient: Address, // Address of the stream recipient
    tokenId: ByteVec, // Token ID to be streamed
    amount: U256, // Total amount to be streamed
    config: StreamConfig, // Configuration of the stream
    mut withdrawnAmount: U256 // Amount already withdrawn from the stream
) {
    // Enumeration of possible errors in Stream
    enum StreamError {
        UnknownKind = 0 // Unknown stream kind
        NotAuthorized = 1 // Caller is not authorized
    }

    // Function to get stream details
    pub fn getStreamDetails() -> (Address, Address, ByteVec, StreamConfig) {
        return creator, recipient, tokenId, config
    }

    // Function to get the locked amount in the stream
    pub fn getLockedAmount() -> U256 {
        return amount - withdrawnAmount
    }

    // Function to get the available amount for unlocking
    pub fn getAvailableAmount() -> U256 {
        // Get the current block timestamp and return 0 if the stream has not started yet
        let timestamp = blockTimeStamp!()
        if (timestamp < config.startTimestamp) {
            return 0
        }
        
        // Check if the stream is linear
        if (config.kind == 0) {
            // Calculate the time elapsed since the stream start (limited by endTimestamp)
            let timeElapsed = (if (timestamp > config.endTimestamp) config.endTimestamp else timestamp) - config.startTimestamp
        
            // Calculate the total duration of the stream
            let totalInterval = config.endTimestamp - config.startTimestamp
        
            // Calculate the unlocked amount
            let linearUnlockedAmount = (amount * timeElapsed) / totalInterval
        
            // Return the available amount
            return linearUnlockedAmount - withdrawnAmount
        }
        
        if (config.kind == 1) {
            // Calculate the time elapsed since the stream start
            let elapsed = timestamp - config.startTimestamp
        
            // Calculate the number of unlock intervals that have passed
            let mut unlocksCount = elapsed / config.unlockInterval

            // Limit the number of unlocks to the maximum possible based on unlockPercentage
            if (unlocksCount > 100 / config.unlockPercentage) {
                unlocksCount = 100 / config.unlockPercentage
            }
        
            // Calculate the unlocked amount based on the number of unlocks
            let customUnlockedAmount = (unlocksCount * amount * config.unlockPercentage) / 100
        
            // Return the available amount
            return customUnlockedAmount - withdrawnAmount
        }
        
        if (config.kind == 2) {
            let stepsCount = size!(config.unlockSteps) / 64
            let mut offset = 0

            // Unlocked amount based on the steps
            let mut stepsUnlockedAmount = 0

            // Loop through each unlock step
            while (offset < stepsCount) {
                let start = offset * 64
                let end = (offset + 1) * 64

                // Extract the timestamp and amount for each step
                let stepTimestamp = u256From32Byte!(byteVecSlice!(config.unlockSteps, start, (end - 32)))
                let stepAmount = u256From32Byte!(byteVecSlice!(config.unlockSteps, start + 32, end))

                if (stepTimestamp <= timestamp) {
                    stepsUnlockedAmount = stepsUnlockedAmount + stepAmount
                } else {
                    return stepsUnlockedAmount - withdrawnAmount
                }

                offset = offset + 1
            }

            return stepsUnlockedAmount - withdrawnAmount
        }

        panic!(StreamError.UnknownKind)
    }
    
    @using(updateFields = true)
    pub fn addWithdrawnAmount(value: U256) -> () {
        // Ensure the caller is the factory contract
        checkCaller!(callerContractId!() == factoryContractId, StreamError.NotAuthorized)

        // Update the withdrawn amount
        withdrawnAmount = withdrawnAmount + value
    }

    @using(assetsInContract = true)
    pub fn destroyStream() -> () {
        // Ensure the caller is the factory contract
        checkCaller!(callerContractId!() == factoryContractId, StreamError.NotAuthorized)

        // Destroy the stream contract
        destroySelf!(creator)
    }
}
