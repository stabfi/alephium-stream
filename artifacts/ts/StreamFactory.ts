/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as StreamFactoryContractJson } from "../StreamFactory.ral.json";
import { getContractByCodeHash } from "./contracts";
import { StreamConfig, AllStructs } from "./types";

// Custom types for the contract
export namespace StreamFactoryTypes {
  export type Fields = {
    streamTemplateId: HexString;
    streamCounter: bigint;
  };

  export type State = ContractState<Fields>;

  export type StreamCreatedEvent = ContractEvent<{
    streamId: bigint;
    creator: Address;
    recipient: Address;
    contractId: HexString;
  }>;
  export type StreamWithdrawnEvent = ContractEvent<{
    streamId: bigint;
    recipient: Address;
    tokenId: HexString;
    amount: bigint;
  }>;
  export type StreamCanceledEvent = ContractEvent<{
    streamId: bigint;
    creator: Address;
    tokenId: HexString;
    amount: bigint;
  }>;
}

class Factory extends ContractFactory<
  StreamFactoryInstance,
  StreamFactoryTypes.Fields
> {
  encodeFields(fields: StreamFactoryTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as StreamFactoryTypes.Fields;
  }

  eventIndex = { StreamCreated: 0, StreamWithdrawn: 1, StreamCanceled: 2 };
  consts = {
    StreamFactoryError: {
      NotAuthorized: BigInt(0),
      NotAvailable: BigInt(1),
      NotCancelable: BigInt(2),
      EmptyStream: BigInt(3),
      InvalidAmount: BigInt(4),
      InvalidStreamPeriod: BigInt(5),
      InvalidUnlockPercentage: BigInt(6),
      InvalidWithdrawAmount: BigInt(7),
    },
  };

  at(address: string): StreamFactoryInstance {
    return new StreamFactoryInstance(address);
  }

  tests = {
    createStream: async (
      params: TestContractParamsWithoutMaps<
        StreamFactoryTypes.Fields,
        {
          caller: Address;
          tokenId: HexString;
          amount: bigint;
          recipient: Address;
          config: StreamConfig;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "createStream", params, getContractByCodeHash);
    },
    withdrawStream: async (
      params: TestContractParamsWithoutMaps<
        StreamFactoryTypes.Fields,
        { streamId: bigint; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdrawStream", params, getContractByCodeHash);
    },
    cancelStream: async (
      params: TestContractParamsWithoutMaps<
        StreamFactoryTypes.Fields,
        { streamId: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "cancelStream", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const StreamFactory = new Factory(
  Contract.fromJson(
    StreamFactoryContractJson,
    "",
    "63406d8ede888d901f8a7b9711b94be7c0d0e6a1e9312dac8ecda6717ae4a864",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class StreamFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<StreamFactoryTypes.State> {
    return fetchContractState(StreamFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeStreamCreatedEvent(
    options: EventSubscribeOptions<StreamFactoryTypes.StreamCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      StreamFactory.contract,
      this,
      options,
      "StreamCreated",
      fromCount
    );
  }

  subscribeStreamWithdrawnEvent(
    options: EventSubscribeOptions<StreamFactoryTypes.StreamWithdrawnEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      StreamFactory.contract,
      this,
      options,
      "StreamWithdrawn",
      fromCount
    );
  }

  subscribeStreamCanceledEvent(
    options: EventSubscribeOptions<StreamFactoryTypes.StreamCanceledEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      StreamFactory.contract,
      this,
      options,
      "StreamCanceled",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | StreamFactoryTypes.StreamCreatedEvent
      | StreamFactoryTypes.StreamWithdrawnEvent
      | StreamFactoryTypes.StreamCanceledEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      StreamFactory.contract,
      this,
      options,
      fromCount
    );
  }
}
