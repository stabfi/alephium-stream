/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as VaultContractJson } from "../Vault.ral.json";
import { getContractByCodeHash } from "./contracts";
import { StreamConfig, AllStructs } from "./types";

// Custom types for the contract
export namespace VaultTypes {
  export type Fields = {
    factoryContractId: HexString;
    tokenId: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    depositAsset: {
      params: CallContractParams<{ depositor: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    transferAsset: {
      params: CallContractParams<{
        caller: Address;
        target: Address;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    depositAsset: {
      params: SignExecuteContractMethodParams<{
        depositor: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    transferAsset: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        target: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<VaultInstance, VaultTypes.Fields> {
  encodeFields(fields: VaultTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as VaultTypes.Fields;
  }

  consts = { VaultError: { NotAuthorized: BigInt("0") } };

  at(address: string): VaultInstance {
    return new VaultInstance(address);
  }

  tests = {
    depositAsset: async (
      params: TestContractParamsWithoutMaps<
        VaultTypes.Fields,
        { depositor: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "depositAsset", params, getContractByCodeHash);
    },
    transferAsset: async (
      params: TestContractParamsWithoutMaps<
        VaultTypes.Fields,
        { caller: Address; target: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "transferAsset", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Vault = new Factory(
  Contract.fromJson(
    VaultContractJson,
    "",
    "5824aa69782578c6168500ed8fa072351cb7da0cbef65a92e331e94985decf5b",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class VaultInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<VaultTypes.State> {
    return fetchContractState(Vault, this);
  }

  view = {
    depositAsset: async (
      params: VaultTypes.CallMethodParams<"depositAsset">
    ): Promise<VaultTypes.CallMethodResult<"depositAsset">> => {
      return callMethod(
        Vault,
        this,
        "depositAsset",
        params,
        getContractByCodeHash
      );
    },
    transferAsset: async (
      params: VaultTypes.CallMethodParams<"transferAsset">
    ): Promise<VaultTypes.CallMethodResult<"transferAsset">> => {
      return callMethod(
        Vault,
        this,
        "transferAsset",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    depositAsset: async (
      params: VaultTypes.SignExecuteMethodParams<"depositAsset">
    ): Promise<VaultTypes.SignExecuteMethodResult<"depositAsset">> => {
      return signExecuteMethod(Vault, this, "depositAsset", params);
    },
    transferAsset: async (
      params: VaultTypes.SignExecuteMethodParams<"transferAsset">
    ): Promise<VaultTypes.SignExecuteMethodResult<"transferAsset">> => {
      return signExecuteMethod(Vault, this, "transferAsset", params);
    },
  };
}
