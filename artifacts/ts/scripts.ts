/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  ExecutableScript,
  ExecuteScriptParams,
  ExecuteScriptResult,
  Script,
  SignerProvider,
  HexString,
} from "@alephium/web3";
import { default as CancelStreamScriptJson } from "../scripts/CancelStream.ral.json";
import { default as CreateALPHCustomStreamScriptJson } from "../scripts/CreateALPHCustomStream.ral.json";
import { default as CreateALPHLinearStreamScriptJson } from "../scripts/CreateALPHLinearStream.ral.json";
import { default as CreateTokenCustomStreamScriptJson } from "../scripts/CreateTokenCustomStream.ral.json";
import { default as CreateTokenLinearStreamScriptJson } from "../scripts/CreateTokenLinearStream.ral.json";
import { default as UnlockStreamScriptJson } from "../scripts/UnlockStream.ral.json";
import { StreamConfig, AllStructs } from "./types";

export const CancelStream = new ExecutableScript<{
  factory: HexString;
  id: bigint;
}>(Script.fromJson(CancelStreamScriptJson, "", AllStructs));

export const CreateALPHCustomStream = new ExecutableScript<{
  factory: HexString;
  amount: bigint;
  recipient: Address;
  isCancelable: boolean;
  startTimestamp: bigint;
  unlockInterval: bigint;
  unlockPercentage: bigint;
}>(Script.fromJson(CreateALPHCustomStreamScriptJson, "", AllStructs));

export const CreateALPHLinearStream = new ExecutableScript<{
  factory: HexString;
  amount: bigint;
  recipient: Address;
  isCancelable: boolean;
  startTimestamp: bigint;
  endTimestamp: bigint;
}>(Script.fromJson(CreateALPHLinearStreamScriptJson, "", AllStructs));

export const CreateTokenCustomStream = new ExecutableScript<{
  factory: HexString;
  tokenId: HexString;
  amount: bigint;
  recipient: Address;
  isCancelable: boolean;
  startTimestamp: bigint;
  unlockInterval: bigint;
  unlockPercentage: bigint;
}>(Script.fromJson(CreateTokenCustomStreamScriptJson, "", AllStructs));

export const CreateTokenLinearStream = new ExecutableScript<{
  factory: HexString;
  tokenId: HexString;
  amount: bigint;
  recipient: Address;
  isCancelable: boolean;
  startTimestamp: bigint;
  endTimestamp: bigint;
}>(Script.fromJson(CreateTokenLinearStreamScriptJson, "", AllStructs));

export const UnlockStream = new ExecutableScript<{
  factory: HexString;
  id: bigint;
}>(Script.fromJson(UnlockStreamScriptJson, "", AllStructs));
