Contract StreamFactory(
    streamTemplateId: ByteVec, // Contract ID of the Stream contract template
    vaultTemplateId: ByteVec, // Contract ID of the Vault contract template
    mut streamCounter: U256 // Counter to keep track of stream instances
) {
    // Event triggered when a new stream is created
    event StreamCreated(streamId: U256, creator: Address, recipient: Address, contractId: ByteVec)
    // Event triggered when a stream is withdrawn
    event StreamWithdrawn(streamId: U256, recipient: Address, tokenId: ByteVec, amount: U256)
    // Event triggered when a stream is canceled
    event StreamCanceled(streamId: U256, creator: Address, tokenId: ByteVec, amount: U256)
    // Event triggered when a stream is transferred
    event StreamTransferred(streamId: U256, recipient: Address)

    // Enumeration of possible errors in StreamFactory
    enum StreamFactoryError {
        NotAuthorized = 0 // Caller is not authorized
        NotAvailable = 1 // Stream is not available for withdrawal
        NotCancelable = 2 // Stream is not cancelable
        NotTransferable = 3 // Stream is not transferable
        InvalidAmount = 4 // Provided amount is invalid
        InvalidStreamPeriod = 5 // Stream period is invalid
        InvalidUnlockInterval = 6 // Unlock interval is invalid
        InvalidUnlockPercentage = 7 // Unlock percentage is invalid
        InvalidUnlockStepsLength = 8 // Unlock steps length is invalid
        InvalidUnlockStepsOrder = 9 // Unlock steps order is invalid
        InvalidWithdrawAmount = 10 // Withdraw amount is invalid
        VaultAlreadyExists = 11 // Vault already exists
        VaultDoesNotExist = 12 // Vault does not exists
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn createVault(tokenId: ByteVec) -> ByteVec {
        // Generate a unique path identifier for the vault
        let path = b`vault` ++ tokenId
        
        // Derive the vault's contract ID using the unique path
        let vaultContractId = subContractId!(path)
    
        // Check if a contract already exists at the derived contract ID
        assert!(!contractExists!(vaultContractId), StreamFactoryError.VaultAlreadyExists)
    
        // Encode immutable and mutable fields for the vault
        let (encodedImmutableFields, encodedMutableFields) = Vault.encodeFields!(
            selfContractId!(), 
            tokenId
        )
    
        // Create a new sub-contract for the vault
        return copyCreateSubContract!{callerAddress!() -> ALPH: minimalContractDeposit!()}(
            path,
            vaultTemplateId,
            encodedImmutableFields,
            encodedMutableFields
        )
    }

    @using(preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
    pub fn createStream(
        caller: Address, // Address of the stream creator
        tokenId: ByteVec, // Token ID to be streamed
        amount: U256, // Amount of tokens to be streamed
        recipient: Address, // Address of the stream recipient
        config: StreamConfig // Stream configuration
    ) -> () {
        // Get a unique path identifier for the vault
        let vaultPath = b`vault` ++ tokenId

        // Derive the vault's contract ID using the unique path
        let vaultContractId = subContractId!(vaultPath)

        // Ensure the amount is greater than zero
        assert!(amount > 0, StreamFactoryError.InvalidAmount)

        // Check if a contract exists at the specified vault contract ID
        assert!(contractExists!(vaultContractId), StreamFactoryError.VaultDoesNotExist)

        // Call the depositAsset function on the Vault contract with the identified contract ID
        Vault(vaultContractId).depositAsset{caller -> tokenId: amount}(caller, amount)
        
        // Validate stream configuration
        if (config.kind == 0) {
            assert!(config.endTimestamp > config.startTimestamp, StreamFactoryError.InvalidStreamPeriod)
        }

        if (config.kind == 1) {
            // Validate unlock interval for interval streams
            assert!(config.unlockInterval > 0, StreamFactoryError.InvalidUnlockInterval)

            // Validate unlock percentage for interval streams
            assert!(config.unlockPercentage > 0, StreamFactoryError.InvalidUnlockPercentage)
            assert!(100 % config.unlockPercentage == 0, StreamFactoryError.InvalidUnlockPercentage)
        }

        if (config.kind == 2) {
            // Ensure the unlock steps array is not empty and its size is a multiple of 64 bytes
            assert!(size!(config.unlockSteps) > 0, StreamFactoryError.InvalidUnlockStepsLength)
            assert!(size!(config.unlockSteps) % 64 == 0, StreamFactoryError.InvalidUnlockStepsLength)

            let stepsCount = size!(config.unlockSteps) / 64
            let mut offset = 0
            let mut lastTimestamp = 0

            // Loop through each unlock step
            while (offset < stepsCount) {
                let start = offset * 64
                let end = (offset + 1) * 64

                // Extract the timestamp and amount for each step
                let stepTimestamp = u256From32Byte!(byteVecSlice!(config.unlockSteps, start, (end - 32)))
                let stepAmount = u256From32Byte!(byteVecSlice!(config.unlockSteps, start + 32, end))

                // Validate the order of the unlock steps and the amount
                assert!(stepTimestamp > lastTimestamp, StreamFactoryError.InvalidUnlockStepsOrder)
                assert!(stepAmount > 0, StreamFactoryError.InvalidAmount)

                lastTimestamp = stepTimestamp
                offset = offset + 1
            }
        }

        if (config.kind >= 3) {
            panic!()
        }

        // Encode immutable and mutable fields for the stream
        let (encodedImmutableFields, encodedMutableFields) = Stream.encodeFields!(
            selfContractId!(),
            caller,
            recipient,
            tokenId,
            amount,
            config,
            0
        )

        // Generate path for the new stream
        let path = toByteVec!(streamCounter)

        // Create a new sub-contract for the stream
        let contractId = copyCreateSubContract!{caller -> ALPH: minimalContractDeposit!()}(
            path,
            streamTemplateId,
            encodedImmutableFields,
            encodedMutableFields
        )
        
        emit Debug(`Stream Id ${streamCounter} - Contract Id ${contractId}`)

        // Emit event for stream creation
        emit StreamCreated(streamCounter, caller, recipient, contractId)

        // Increment the stream counter
        streamCounter = streamCounter + 1
    }

    @using(preapprovedAssets = true)
    pub fn withdrawStream(streamId: U256, amount: U256) -> () {
        let caller = callerAddress!()

        // Get the sub-contract ID of the stream
        let path = toByteVec!(streamId)
        let contractId = subContractId!(path)

        // Retrieve stream details and ensure the caller is the recipient
        let (_, recipient, tokenId, _) = Stream(contractId).getStreamDetails()
        checkCaller!(caller == recipient, StreamFactoryError.NotAuthorized)

        // Get the available amount to unlock and ensure there is an amount to unlock
        let mut unlockedAmount = Stream(contractId).getAvailableAmount()
        assert!(unlockedAmount > 0, StreamFactoryError.NotAvailable)

        // Ensure the requested amount to unlock is valid
        assert!(amount <= unlockedAmount, StreamFactoryError.InvalidWithdrawAmount)

        // If a specific amount is requested, update the unlock amount
        if (amount != 0) {
            unlockedAmount = amount
        }

        // Transfer the unlocked amount to the recipient and update the withdrawn amount in the stream
        let vaultPath = b`vault` ++ tokenId
        let vaultContractId = subContractId!(vaultPath)
        Vault(vaultContractId).transferAsset{caller -> ALPH: dustAmount!()}(caller, recipient, unlockedAmount)
        Stream(contractId).addWithdrawnAmount(unlockedAmount)

        // Get the remaining locked amount and destroy the stream sub-contract if no amount is left
        let remainingAmount = Stream(contractId).getLockedAmount()
        if (remainingAmount == 0) {
            Stream(contractId).destroyStream()
        }

        // Emit event for stream withdrawal
        emit StreamWithdrawn(streamId, recipient, tokenId, unlockedAmount)
    }

    @using(preapprovedAssets = true)
    pub fn transferStream(streamId: U256, newRecipient: Address) -> () {
        // Get the sub-contract ID of the stream
        let path = toByteVec!(streamId)
        let contractId = subContractId!(path)

        // Retrieve stream details and ensure the caller is the recipient
        let (_, recipient, _, config) = Stream(contractId).getStreamDetails()
        checkCaller!(callerAddress!() == recipient, StreamFactoryError.NotAuthorized)

        // Ensure the stream is transferable
        assert!(config.isTransferable, StreamFactoryError.NotTransferable)

        // Transfer the stream
        Stream(contractId).transferStream(newRecipient)

        // Emit event for stream transfer
        emit StreamTransferred(streamId, newRecipient)
    }

    @using(preapprovedAssets = true)
    pub fn cancelStream(streamId: U256) -> () {
        let caller = callerAddress!()

        // Get the sub-contract ID of the stream
        let path = toByteVec!(streamId)
        let contractId = subContractId!(path)

        // Retrieve stream details and ensure the caller is the creator
        let (creator, _, tokenId, config) = Stream(contractId).getStreamDetails()
        checkCaller!(caller == creator, StreamFactoryError.NotAuthorized)

        // Ensure the stream is cancelable
        assert!(config.isCancelable, StreamFactoryError.NotCancelable)

        // Get the locked amount in the stream
        let lockedAmount = Stream(contractId).getLockedAmount()

        // Transfer the locked amount back to the creator
        let vaultPath = b`vault` ++ tokenId
        let vaultContractId = subContractId!(vaultPath)
        Vault(vaultContractId).transferAsset{caller -> ALPH: dustAmount!()}(caller, creator, lockedAmount)

        // Destroy the stream
        Stream(contractId).destroyStream()

        // Emit event for stream cancellation
        emit StreamCanceled(streamId, creator, tokenId, lockedAmount)
    }
}
